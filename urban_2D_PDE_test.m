%setting the parameters
N=3;
D3=1.5;%1.9928608732968183 - this separates between super (below) and sub (above)
D2=D3;
ubar=0.5;
alpha=0.05;
D1=(1/32).*D3.^(-2).*ubar.^(-1).*(16.*alpha.*D3+(-8).*alpha.*D3.^2+ ...
  2.*alpha.*ubar+(-16).*D3.*ubar+(-1).*alpha.*D3.*ubar+(-2).* ...
  ubar.^2+D3.*ubar.^2)+(1/32).*(D3.^(-4).*ubar.^(-2).*(512.* ...
  alpha.^2.*D3.^2+(-256).*alpha.^2.*D3.^3+64.*alpha.^2.*D3.*ubar+( ...
  -1024).*alpha.*D3.^2.*ubar+(-64).*alpha.^2.*D3.^2.*ubar+256.* ...
  alpha.*D3.^3.*ubar+16.*alpha.^2.*D3.^3.*ubar+4.*alpha.^2.*ubar.^2+ ...
  (-128).*alpha.*D3.*ubar.^2+(-4).*alpha.^2.*D3.*ubar.^2+512.* ...
  D3.^2.*ubar.^2+96.*alpha.*D3.^2.*ubar.^2+alpha.^2.*D3.^2.*ubar.^2+ ...
  (-16).*alpha.*D3.^3.*ubar.^2+(-8).*alpha.*ubar.^3+64.*D3.*ubar.^3+ ...
  8.*alpha.*D3.*ubar.^3+(-32).*D3.^2.*ubar.^3+(-2).*alpha.*D3.^2.* ...
  ubar.^3+4.*ubar.^4+(-4).*D3.*ubar.^4+D3.^2.*ubar.^4)).^(1/2);
beta = (-1).*D1.^(-1).*ubar.^(-2).*((-2).*alpha.^2+(-1).*alpha.^2.*D2+4.* ...
  alpha.*ubar+alpha.*D2.*ubar+(-8).*alpha.*D1.*D2.*ubar+(-2).* ...
  ubar.^2+8.*D1.*D2.*ubar.^2);

vbar= 1-alpha/ubar;
wbar = ubar*(beta/(ubar-alpha)-1);

K=(1/2).*D1.^(-1).*D2.^(-1).*ubar.^(-1).*((-1).*alpha+ubar).^(-1).*( ...
  alpha.^2.*(2+D2)+(-1).*alpha.*(4+D2).*ubar+(2+(-1).*beta.*D1).* ...
  ubar.^2);
chi=D3.*(alpha+beta+(-1).*ubar).^(-1).*(alpha+D1.*D2.*K.^2+(-1).*ubar+ ...
  (-1).*alpha.*beta.*((-1).*alpha+ubar).^(-1));

%these are coefficients for IC
Q=(1/2).*D2.^(-1).*ubar.^(-2).*((-1).*alpha+ubar).^(-1).*((-1).* ...
  alpha.^2.*((-2)+D2)+alpha.*((-4)+D2).*ubar+(2+(-1).*beta.*D1).* ...
  ubar.^2);

R=(1/4).*D1.^(-1).*D2.^(-1).*ubar.^(-2).*((-1).*alpha+ubar).^(-3).*( ...
  alpha.^4.*(2+D2).^2+(-2).*alpha.^3.*(8+6.*D2+D2.^2).*ubar+ ...
  alpha.^2.*(24+2.*beta.*D1.*((-2)+D2)+4.*(3+alpha.*D1).*D2+D2.^2).* ...
  ubar.^2+(-2).*alpha.*(beta.*D1.*((-4)+D2)+2.*(4+D2+3.*alpha.*D1.* ...
  D2)).*ubar.^3+(4+(-4).*beta.*D1+beta.^2.*D1.^2+12.*alpha.*D1.*D2) ...
  .*ubar.^4+(-4).*D1.*D2.*ubar.^5);

%these are coefficients for ODE, they are needed to compute steady states,
%which in turn help with initializing the PDE
C1=D1.^(-2).*D2.^(-1).*K.^(-2).*ubar.^(-2).*((-1).*alpha+ubar).^(-1) ...
  .*(alpha.*(2+D2)+2.*((-1)+D1.*D2.*K).*ubar+D1.*ubar.^2).^(-1).*( ...
  alpha.^3.*(2+D2).^2.*(1+8.*D1.*K)+alpha.^2.*(2+D2).*((-4)+(-2).* ...
  D1.*(18+D2).*K+D1.^2.*(8+25.*D2).*K.^2).*ubar+alpha.*(4+8.*D1.*(6+ ...
  D2).*K+(-1).*D1.^2.*(32+76.*D2+13.*D2.^2).*K.^2+20.*D1.^3.*D2.*(1+ ...
  D2).*K.^3+alpha.*D1.*(2+D2).*(1+8.*D1.*K)).*ubar.^2+D1.*(K.*((-8)+ ...
  2.*D1.*(8+9.*D2).*K+(-10).*D1.^2.*D2.*(2+D2).*K.^2+3.*D1.^3.* ...
  D2.^2.*K.^3)+alpha.*(4.*D1.*K.*((-5)+2.*D1.*K)+D2.*(1+(-4).*D1.*K+ ...
  9.*D1.^2.*K.^2))).*ubar.^3+D1.*((-2)+2.*D1.*(2+D2).*K+(-1).* ...
  D1.^2.*(8+3.*D2).*K.^2+2.*D1.^3.*D2.*K.^3).*ubar.^4);
C2=C1;
C3=2.*D1.^(-2).*D2.^(-1).*K.^(-2).*ubar.^(-2).*((-1).*alpha+ubar).^( ...
  -1).*(alpha.*(2+D2)+2.*((-1)+D1.*D2.*K).*ubar+D1.*ubar.^2).^(-1).* ...
  (alpha.^3.*(2+D2).^2.*(1+4.*D1.*K)+alpha.^2.*(2+D2).*((-4)+2.*D1.* ...
  ((-8)+D2).*K+D1.^2.*(4+13.*D2).*K.^2).*ubar+alpha.*(4+(-4).*D1.*(( ...
  -4)+D2).*K+(-1).*D1.^2.*(16+32.*D2+D2.^2).*K.^2+12.*D1.^3.*D2.*(1+ ...
  D2).*K.^3+alpha.*D1.*(2+D2).*(1+4.*D1.*K)).*ubar.^2+D1.*(alpha.*( ...
  D2+5.*D1.^2.*D2.*K.^2+4.*D1.*K.*((-2)+D1.*K))+D1.*K.^2.*(8+D2.*(2+ ...
  (-12).*D1.*K)+D1.*D2.^2.*K.*((-2)+3.*D1.*K))).*ubar.^3+D1.*((-2)+ ...
  2.*D1.*D2.*K+D1.^2.*((-4)+D2).*K.^2+2.*D1.^3.*D2.*K.^3).*ubar.^4);


U1=(-1).*K.*((-1).*alpha+ubar).*(alpha.*(2+D2)+2.*((-1)+D1.*D2.*K).* ...
  ubar+D1.*ubar.^2).*((-1).*alpha.^2.*(2+D2)+alpha.*(2+(-1).*(2+D2) ...
  .*D3.*K+D1.*((-2).*D2+D3).*K).*ubar+(-1).*(alpha.*D1+K.*(D1.^2.* ...
  D2.*K+D3.*((-2)+(-1).*D1.^2.*K+D1.*D2.*K))).*ubar.^2+D1.*ubar.^3) ...
  .^(-1);
U2=(1/72).*D3.*K.*ubar.^(-1).*((-1).*alpha+ubar).^(-2).*(alpha.*(2+ ...
  D2)+2.*((-1)+D1.*D2.*K).*ubar+D1.*ubar.^2).^(-1).*((-1).* ...
  alpha.^2.*(2+D2)+alpha.*(2+(-1).*(2+D2).*D3.*K+D1.*((-2).*D2+D3).* ...
  K).*ubar+(-1).*(alpha.*D1+K.*(D1.^2.*D2.*K+D3.*((-2)+(-1).*D1.^2.* ...
  K+D1.*D2.*K))).*ubar.^2+D1.*ubar.^3).^(-1).*(18.*alpha.^4.*(2+D2) ...
  .^2.*(4+37.*D1.*K)+(-1).*alpha.^3.*(2+D2).*(alpha.*C2.*(2+D2).*(1+ ...
  2.*D1.*K)+18.*(20+224.*D1.*K+(-44).*D1.^2.*K.^2+D2.*(2+40.*D1.*K+( ...
  -119).*D1.^2.*K.^2))).*ubar+alpha.^2.*(alpha.*(2+D2).*(18.*D1.*(4+ ...
  37.*D1.*K)+C2.*(6+D2+4.*D1.*K+(-5).*D1.*D2.*K+4.*D1.^2.*K.^2+80.* ...
  D1.^2.*D2.*K.^2))+18.*(D1.*D2.^2.*K.*(16+(-149).*D1.*K+108.* ...
  D1.^2.*K.^2)+4.*(8+123.*D1.*K+(-57).*D1.^2.*K.^2+2.*D1.^3.*K.^3)+ ...
  2.*D2.*(4+104.*D1.*K+(-283).*D1.^2.*K.^2+64.*D1.^3.*K.^3))).* ...
  ubar.^2+(-1).*alpha.*(alpha.^2.*C2.*D1.*(2+D2).*(1+2.*D1.*K)+(-18) ...
  .*((-8)+(-4).*D1.*(58+13.*D2).*K+2.*D1.^2.*(96+184.*D2+31.*D2.^2) ...
  .*K.^2+(-2).*D1.^3.*(8+96.*D2+57.*D2.^2).*K.^3+D1.^4.*D2.*(18+31.* ...
  D2).*K.^4)+alpha.*((-18).*D1.*((-4)+(-158).*D1.*K+44.*D1.^2.*K.^2+ ...
  D2.*(2+(-52).*D1.*K+45.*D1.^2.*K.^2))+C2.*(D1.*D2.^2.*K.*((-7)+ ...
  166.*D1.*K+(-172).*D1.^2.*K.^2)+12.*(1+(-2).*D1.*K+2.*D1.^2.*K.^2) ...
  +(-4).*D2.*((-1)+9.*D1.*K+(-124).*D1.^2.*K.^2+4.*D1.^3.*K.^3)))).* ...
  ubar.^3+(alpha.^2.*C2.*D1.*(2+(-3).*D1.*D2.*K+4.*D1.^2.*(1+21.*D2) ...
  .*K.^2)+18.*D1.*K.*(40+(-4).*D1.*(13+21.*D2).*K+4.*D1.^2.*(2+16.* ...
  D2+11.*D2.^2).*K.^2+(-9).*D1.^3.*D2.*(2+D2).*K.^3+5.*D1.^4.* ...
  D2.^2.*K.^4)+2.*alpha.*(C2.*(2+(-1).*D1.*(20+11.*D2).*K+D1.^2.*( ...
  12+250.*D2+43.*D2.^2).*K.^2+(-2).*D1.^3.*D2.*(8+81.*D2).*K.^3+9.* ...
  D1.^4.*D2.^2.*K.^4)+9.*D1.*(2.*((-5)+55.*D1.*K+(-37).*D1.^2.*K.^2+ ...
  2.*D1.^3.*K.^3)+D2.*((-3)+33.*D1.*K+(-49).*D1.^2.*K.^2+14.*D1.^3.* ...
  K.^3)))).*ubar.^4+D1.*(18.*(6+(-2).*D1.*(13+3.*D2).*K+2.*D1.^2.*( ...
  15+11.*D2).*K.^2+(-2).*D1.^3.*(2+D2).*K.^3+3.*D1.^4.*D2.*K.^4)+( ...
  -2).*C2.*K.*((-8)+(-4).*D1.^2.*D2.*(2+19.*D2).*K.^2+9.*D1.^3.* ...
  D2.^2.*K.^3+4.*D1.*(K+21.*D2.*K))+alpha.*C2.*(2+12.*D1.*K+(-8).* ...
  D1.^2.*K.^2+D2.*(1+3.*D1.*K+(-171).*D1.^2.*K.^2+4.*D1.^3.*K.^3))) ...
  .*ubar.^5+C2.*D1.*((-2)+2.*D1.*((-4)+D2).*K+D1.^2.*(4+87.*D2).* ...
  K.^2+(-4).*D1.^3.*D2.*K.^3).*ubar.^6);
U3=(1/4).*D3.*K.*ubar.^(-1).*((-1).*alpha+ubar).^(-2).*(alpha.*(2+D2) ...
  +2.*((-1)+D1.*D2.*K).*ubar+D1.*ubar.^2).^(-1).*((-1).*alpha.^2.*( ...
  2+D2)+alpha.*(2+(-1).*(2+D2).*D3.*K+D1.*((-2).*D2+D3).*K).*ubar+( ...
  -1).*(alpha.*D1+K.*(D1.^2.*D2.*K+D3.*((-2)+(-1).*D1.^2.*K+D1.*D2.* ...
  K))).*ubar.^2+D1.*ubar.^3).^(-1).*(2.*alpha.^4.*(2+D2).^2.*(4+17.* ...
  D1.*K)+(-1).*alpha.^3.*(2+D2).*(alpha.*C3.*(2+D2).*(1+2.*D1.*K)+ ...
  D2.*(4+8.*D1.*K+(-118).*D1.^2.*K.^2)+8.*(5+23.*D1.*K+(-6).*D1.^2.* ...
  K.^2)).*ubar+alpha.^2.*(2.*(D1.^2.*D2.^2.*K.^2.*((-41)+64.*D1.*K)+ ...
  4.*(8+43.*D1.*K+(-29).*D1.^2.*K.^2+2.*D1.^3.*K.^3)+D2.*(8+36.*D1.* ...
  K+(-234).*D1.^2.*K.^2+80.*D1.^3.*K.^3))+(-1).*alpha.*(2+D2).*((-2) ...
  .*D1.*(4+17.*D1.*K)+C3.*((-6)+(-8).*D1.*K+2.*D1.^2.*K.^2+D2.*((-1) ...
  +3.*D1.*K+3.*D1.^2.*K.^2)))).*ubar.^2+(-1).*alpha.*(16+8.*D1.*(16+ ...
  D2).*K+(-4).*D1.^2.*(44+56.*D2+7.*D2.^2).*K.^2+4.*D1.^3.*(8+54.* ...
  D2+19.*D2.^2).*K.^3+(-2).*D1.^4.*D2.*(14+27.*D2).*K.^4+alpha.^2.* ...
  C3.*D1.*(2+D2).*(1+2.*D1.*K)+2.*alpha.*D1.*(4+58.*D1.*K+(-24).* ...
  D1.^2.*K.^2+D2.*((-2)+12.*D1.*K+(-25).*D1.^2.*K.^2))+alpha.*C3.*( ...
  12+(-12).*D1.^2.*K.^2+D1.*D2.^2.*K.*((-5)+9.*D1.*K)+4.*D2.*(1+(-5) ...
  .*D1.*K+D1.^2.*K.^2+2.*D1.^3.*K.^3))).*ubar.^3+(alpha.^2.*C3.*D1.* ...
  (2+(-1).*D1.*((-4)+D2).*K+D1.^2.*((-2)+D2).*K.^2)+2.*D1.*K.*(8+( ...
  -20).*D1.*(1+D2).*K+4.*D1.^2.*(2+7.*D2+3.*D2.^2).*K.^2+(-1).* ...
  D1.^3.*D2.*(14+5.*D2).*K.^3+5.*D1.^4.*D2.^2.*K.^4)+alpha.*(C3.*(4+ ...
  (-2).*D1.*(8+7.*D2).*K+4.*D1.^2.*((-3)+8.*D2+3.*D2.^2).*K.^2+(-4) ...
  .*D1.^3.*D2.*((-4)+3.*D2).*K.^3+(-3).*D1.^4.*D2.^2.*K.^4)+2.*D1.*( ...
  (-10)+30.*D1.*K+(-34).*D1.^2.*K.^2+4.*D1.^3.*K.^3+D2.*((-3)+13.* ...
  D1.*K+(-9).*D1.^2.*K.^2+14.*D1.^3.*K.^3)))).*ubar.^4+D1.*(C3.*K.*( ...
  8+4.*D1.*(1+(-5).*D2).*K+4.*D1.^2.*D2.*((-2)+3.*D2).*K.^2+3.* ...
  D1.^3.*D2.^2.*K.^3)+2.*(6+(-6).*D1.*(1+D2).*K+2.*D1.^2.*(5+D2).* ...
  K.^2+(-2).*D1.^3.*(2+D2).*K.^3+3.*D1.^4.*D2.*K.^4)+alpha.*C3.*(2+ ...
  4.*D1.*K+4.*D1.^2.*K.^2+D2.*(1+D1.*K+(-9).*D1.^2.*K.^2+(-2).* ...
  D1.^3.*K.^3))).*ubar.^5+2.*C3.*D1.*((-1)+D1.*((-2)+D2).*K+D1.^2.*( ...
  (-1)+4.*D2).*K.^2+D1.^3.*D2.*K.^3).*ubar.^6);

V1=U1;
V2=U2;
V3=U3;

%setting time and space
Tmax=20000;
wk=sqrt(K);
a = 0; 
b = 4*pi/wk;  
L = b-a;
eps = -0.2:0.02:0.2;%-0.1;
UsimEnd=zeros(1,length(eps));
UsimSt=zeros(1,length(eps));
lowerLeft  = [a   ,a   ];
lowerRight = [b , a  ];
upperRight = [b , b];
upperLeft =  [a , b];
%Setting the geometry
S = [3,4 lowerLeft(1), lowerRight(1), upperRight(1), upperLeft(1), ...
         lowerLeft(2), lowerRight(2), upperRight(2), upperLeft(2)];                     
gdm = S';
ns = 'S';
sf = 'S';
g = decsg(gdm,ns,sf');
d=[1;1;1];

%We use loop to perform the test
for l=1:length(eps)
Pf=[N, alpha, beta ];
Pc=[N, D1, D2,D3,chi,eps(l)];
%Initial magnitude is chosen so that we are close to the theoretical steady
%state
P0=(eps(l)<0)*0.1+(eps(l)>=0)*0.9*sqrt(-eps(l)*U1/(U2+U3));
model = createpde(N);
geometryFromEdges(model,g);
generateMesh(model);
applyBoundaryCondition(model,"neumann","Edge",1:4);
specifyCoefficients(model,"m",0,"d",d,"c",@(location,state)ccoeffunction(location,state,Pc),"a",0,"f",@(location,state)fcoeffunction(location,state,Pf));
%initial conditions
icFcn = @(region) [ubar + P0*(cos(region.x*wk)+cos(region.y*wk));
                   vbar + P0*(cos(region.x*wk)+cos(region.y*wk))*Q;
                   wbar + P0*(cos(region.x*wk)+cos(region.y*wk))*R];
setInitialConditions(model,icFcn);
%solving PDE
tlist = linspace(0,Tmax,Tmax+1);
results = solvepde(model,tlist);
%mesh is constant throughout the test, so can be computed once. It is used
%to get correct rms for ODEs
X=model.Mesh.Nodes;
u1=reshape(results.NodalSolution(:,1,:),[size(results.NodalSolution(:,1,:),1),size(results.NodalSolution(:,1,:),3)]);
%Recoring rms
Usim=rms(u1-ubar);
UsimEnd(l)=Usim(end);
UsimSt(l)=Usim(1);
end

figure()
plot(eps,UsimEnd)


%save('Pde_test_1')

%reaction terms
function f = fcoeffunction(location,state,P)
N=P(1); alpha=P(2); beta=P(3); 
nr = length(location.x);
f = zeros(N,nr); 
f(1,:) = -state.u(1,:)+state.u(1,:).*state.u(2,:)+alpha;
f(2,:) = -state.u(1,:).*state.u(2,:)-state.u(3,:).*state.u(2,:)+beta;
end

%diffusion terms
function cmatrix = ccoeffunction(location,state,P)
N=P(1); D1=P(2); D2=P(3); D3=P(4); chi=P(5); eps=P(6);
n1 = 2*N;
nr = numel(location.x);
cmatrix = zeros(n1^2,nr);
cmatrix(1,:)=D1*ones(1,nr);
cmatrix(4,:)=D1*ones(1,nr);
cmatrix(5,:)=-2*state.u(2,:)./state.u(1,:);
cmatrix(8,:)=-2*state.u(2,:)./state.u(1,:);
cmatrix(9,:)=-(chi-eps)*state.u(3,:)./state.u(1,:);
cmatrix(12,:)=-(chi-eps)*state.u(3,:)./state.u(1,:);
cmatrix(2*n1+5,:)=D2*ones(1,nr);
cmatrix(2*n1+8,:)=D2*ones(1,nr);
cmatrix(n1^2-3,:)=D3*ones(1,nr);
cmatrix(n1^2,:)=D3*ones(1,nr);
end